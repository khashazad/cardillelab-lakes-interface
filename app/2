"use client";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { FetchLakeData } from "../actions";
import ObservationChart from "./chart";
import { FormEvent, useEffect, useState } from "react";
import { LandsatObservation } from "@/types";
import { lakeSchema, TLakeSchema } from "@/validation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";

export default function ExplorerPage() {
  const [observations, setObservations] = useState<LandsatObservation[]>();
  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<TLakeSchema>({
    resolver: zodResolver(lakeSchema),
  });

  const onSubmit = async (data: TLakeSchema) => {
    setLoading(true);
    try {
      const result = await FetchLakeData(data.Id);

      setObservations(result as unknown as LandsatObservation[]);
    } catch (e) {
      setError((e as Error).message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card className="m-8 flex flex-col gap-8 pt-10">
      <div className="mx-8 flex jusitfy-start items-center py-4">
        <form
          className="flex gap-[4rem] w-max items-center"
          onSubmit={handleSubmit(onSubmit)}
        >
          <Label className="flex-auto w-[10rem]">Lake ID</Label>
          <Input {...register("Id")} type="number" />
          <Button type="submit">View Data</Button>
        </form>

          {loading && (
            <ButtonLoadingSpinner loadingText={"loading"} />
          )
        {error && <div></div>}

        {observations && <ObservationChart observations={observations} />}
      </div>
    </Card>
  );
}
